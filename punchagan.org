This is all the code that gets run inside the user-config function in
dotspacemacs. The sections are organized similar to the layers of Spacemacs.

* Startup
Turn on lexical binding, so that we can use it in the code that follows!
#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-
#+END_SRC

* Spacemacs layers?
** Editor
*** Use paredit bindings
#+BEGIN_SRC emacs-lisp
  (sp-use-paredit-bindings)
#+END_SRC
** Auth
*** auth sources
#+BEGIN_SRC emacs-lisp
(setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
#+END_SRC
* Chat
** Jabber
**** Account setup
#+BEGIN_SRC emacs-lisp
  (setq jabber-account-list
        `(
          ;; Gmail
          (,(format "punchagan@gmail.com/Emacs-%s-Jabber" emacs-version)
           (:network-server . "talk.google.com")
           (:password . ,(cadr (auth-source-user-and-password "emacs-jabber")))
           (:connection-type . starttls))
          ))
#+END_SRC
**** Appearance
#+BEGIN_SRC emacs-lisp
  ;; Don't show avatars in chat windows
  (setq jabber-chat-buffer-show-avatar nil)

  ;; Jabber roster tweaks
  (setq jabber-roster-show-title nil
        jabber-roster-show-bindings nil)

  ;; make URLs clickable
  (add-hook 'jabber-chat-mode-hook 'goto-address)
#+END_SRC

**** Alerts
***** Custom notifications
Switch to the buffer when notification is clicked.

#+BEGIN_SRC emacs-lisp
  (defun pc/jabber-message-notifications (from buffer text title)
      "Show a message through the notifications.el interface"
      (let
          ((body (or (jabber-escape-xml text) " "))
           (head (jabber-escape-xml
                  (or title
                      (or jabber-notifications-message-header " ")
                      text)))
           (avatar-hash (get (jabber-jid-symbol from) 'avatar-hash))
           (on-close (lambda (id action) (unless (or (null jabber-activity-mode)
                                                     (member buffer (mapcar #'window-buffer (window-list))))
                                           (switch-to-buffer buffer)))))
        (notifications-notify
         :title title
         :body body
         :app-icon (or (and avatar-hash (jabber-avatar-find-cached avatar-hash))
                       jabber-notifications-icon)
         :app-name jabber-notifications-app
         :category "jabber.message"
         :timeout jabber-notifications-timeout
         :on-close on-close)))
#+END_SRC

***** Setup notifications
#+BEGIN_SRC emacs-lisp
  (setq jabber-alert-presence-hooks nil)

  (setq jabber-alert-message-hooks '(jabber-message-scroll pc/jabber-message-notifications))

  ;; Enable alerts when focussed out of Emacs
  (add-hook 'focus-out-hook
            (lambda () (add-hook 'jabber-alert-message-hooks #'pc/jabber-message-notifications)))

  ;; Disable alerts when focussed in Emacs
  (add-hook 'focus-in-hook
            (lambda () (remove-hook 'jabber-alert-message-hooks #'pc/jabber-message-notifications)))

#+END_SRC

**** Auto-away
#+BEGIN_SRC emacs-lisp
(add-hook 'jabber-post-connect-hooks 'jabber-autoaway-start)
#+END_SRC
**** History
#+BEGIN_SRC emacs-lisp
  (setq
   jabber-history-enabled t
   jabber-use-global-history nil
   jabber-backlog-number 40
   jabber-backlog-days 30)
#+END_SRC

**** Jabber message queue
#+BEGIN_SRC emacs-lisp
  (defconst pc/jabber-message-queue-file
    (expand-file-name ".jabber-message-queue.json" user-emacs-directory)
    "The file where jabber messages are queued")

  (defun pc/jabber-add-message-to-queue (to body)
    "Queue up messages when offline, and send on connect."
    (interactive (list
                  (read-string "message: ")))
    (let* ((from (nth 0 jabber-account-history))
           (data (append
                  (or (ignore-errors (json-read-file pc/jabber-message-queue-file)) '())
                  `(((from . ,from) (to . ,to) (body . ,body))))))

      (with-temp-buffer
        (insert (json-encode data))
        (write-file pc/jabber-message-queue-file nil))))

  (defun pc/jabber-chat-buffer-send ()
    "Send the message in the chat buffer to the queue."
    (interactive)
    (let ((body (delete-and-extract-region jabber-point-insert (point-max))))
      (funcall 'pc/jabber-add-message-to-queue jabber-chatting-with body)))

  (defun pc/jabber-flush-queue (jc)
    "Send all queued messages and empty queue."
    (ignore-errors
      (let ((data (or (ignore-errors (json-read-file pc/jabber-message-queue-file)) '())))
        ;; Send messages
        (mapcar
         (lambda (x) (let ((to (cdr (assoc 'to x)))
                           (body (cdr (assoc 'body x)))
                           (from (cdr (assoc 'from x))))
                       (when (string= from (jabber-connection-bare-jid jc))
                         (jabber-send-message jc to nil body "chat")
                         (message (format "Sent message to %s: %s" to body))
                         (setq data (delete x data)))))
         data)


        ;; Update queue file
        (with-temp-buffer
          (insert (json-encode data))
          (write-file pc/jabber-message-queue-file nil))

        ;; Restore keymap
        (mapcar
         (lambda (buffer)
           (with-current-buffer buffer
             (when (equal major-mode 'jabber-chat-mode)
               (local-set-key (kbd "RET") 'jabber-chat-buffer-send))))
         (buffer-list)))))

  (add-hook 'jabber-post-connect-hooks 'pc/jabber-flush-queue)
#+END_SRC
** IRC
*** servers and channels
#+begin_src emacs-lisp
  (setq rcirc-server-alist
        '(("irc.freenode.net" :channels ("#dgplug" "#fossee" "#emacs-in" "##linux-india"))))
#+end_src
*** nick
#+begin_src emacs-lisp
  (setq rcirc-default-nick "punchagan")
#+end_src
*** auth
#+begin_src emacs-lisp
  (setq rcirc-authinfo
        `(("freenode" nickserv "punchagan" ,(cadr (auth-source-user-and-password "freenode")))))
#+end_src
* Emacs
** Org
*** org-mode
**** Set org-directory
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/.life-in-plain-text/src/")
#+END_SRC
**** Open link on RET
#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link t)
#+END_SRC
**** Agenda files
Use a file to list all the agenda files, explicitly
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        (expand-file-name "agenda-files.org" org-directory))
#+END_SRC
**** Enable org-capture
#+BEGIN_SRC emacs-lisp
  (require 'org-capture)
#+END_SRC
**** Enable ditaa for org-babel
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-babel-load-languages '(ditaa . t))
#+END_SRC
**** Enable org-tempo with new org version
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
*** org-journal
**** Use datetree capture for journal
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("j"
                 "Journal"
                 entry
                 (file+olp+datetree "journal.org")
                 "* %?"))
#+END_SRC
**** Refile Inbox.org items
Move items in ~Inbox.org~ file to respective journal files.
- NOTES move under the journal notes heading
#+BEGIN_SRC emacs-lisp
  (defun pc/refile-inbox-item ()
    "Refile the item at point to a journal file."
    (interactive)
    (save-mark-and-excursion
      (save-match-data
        (org-back-to-heading :invisible-ok)
        (let* ((timestamp (or (org-entry-get (point) "CLOSED")
                              (org-entry-get (point) "CREATED")))
               (time (apply 'encode-time (org-parse-time-string timestamp)))
               (todo-state (org-entry-get (point) "TODO"))
               (cut-marker (point-marker))
               yank-pos)
          (unless (string= todo-state "TODO")
            (org-cut-special)
            (org-journal-new-entry t time)
            (unless (eq (current-column) 0) (insert "\n"))
            (insert "*")
            (setq yank-pos (point))
            (org-yank t)
            (goto-char yank-pos)
            (move-beginning-of-line nil)
            (search-forward " ")
            (when (org-entry-is-done-p)
              (search-forward " "))
            (insert (format-time-string org-journal-time-format time))
            (org-up-heading-safe)
            (org-sort-entries nil ?a)
            (save-buffer)
            (switch-to-buffer-other-window (marker-buffer cut-marker))
            (goto-char (marker-position cut-marker)))))))

  (defun pc/refile-inbox-all ()
    (interactive)
    (let ((inbox (expand-file-name "Inbox.org" org-directory)))
      (with-current-buffer (find-file-noselect inbox)
        (goto-char (point-min))
        (org-first-headline-recenter)
        (ignore-errors
          (while t
            (pc/refile-inbox-item)))
        (save-buffer))))
#+END_SRC
**** Journal function that run from shell scripts
#+BEGIN_SRC emacs-lisp
  (require 'org-clock)
  (defun pc/journal ()
    "Make a journal entry at the current time."
    (interactive)
    (let* ((title "What are you doing?")
           (frame (or
                   (car (filtered-frame-list
                         (lambda (f)
                           (string= title (cdr (assq 'title (frame-parameters f)))))))
                   (make-frame
                    `((title . ,title)
                      (user-position . t)
                      (left . (+ 550))
                      (top . (+ 400))
                      (width . 120)
                      (height . 40)))))
           buffer)
      (select-frame frame)
      (if (org-clocking-p)
          (org-clock-goto)
        (org-capture-goto-target "j"))
      (setq buffer (current-buffer))
      (delete-other-windows)
      (org-agenda nil "a")
      (org-super-agenda-mode t)
      (org-agenda-log-mode t)
      (org-agenda-day-view)
      (org-agenda-goto-today)
      (pop-to-buffer buffer)
      (org-narrow-to-subtree)
      (outline-show-subtree)
      (goto-char (buffer-end 1))
      (shell-command (format "wmctrl -a \"%s\"" title))))
#+END_SRC
*** org-protocol
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
  (setq org-protocol-protocol-alist org-protocol-protocol-alist-default)
#+END_SRC
**** Add handlers in emacs
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
             '("p"
               "Protocol"
               entry
               (file "Inbox.org")
               "* %:description\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%:link\n\n#+BEGIN_QUOTE\n%:initial\n#+END_QUOTE\n\n%?"))
#+END_SRC
*** org-pomodoro
#+BEGIN_SRC emacs-lisp
  (defun pc/get-shit-done-work ()
    (interactive)
    (let ((default-directory "/sudo::"))
      (shell-command "HOME=/home/punchagan/ get-shit-done work"))
    (shell-command "killall slack")
    (shell-command "killall zulip")
    (shell-command "killall electron")
    (shell-command "fullscreen on"))

  (defun pc/get-shit-done-play ()
    (interactive)
    (let ((default-directory "/sudo::"))
      (shell-command "HOME=/home/punchagan/ get-shit-done play"))
    (shell-command "fullscreen off"))

  ;; Enable get-shit-done when clock is on!
  (add-to-list 'org-clock-in-hook #'pc/get-shit-done-work)
  (add-to-list 'org-clock-out-hook #'pc/get-shit-done-play)
#+END_SRC
*** ox-capture
**** Capture template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("t"
                 "TODO"
                 entry
                 (file "Inbox.org")
                 "* TODO %? \n:PROPERTIES:\n:CREATED: %U\n:END:\n%a\n"))
#+END_SRC
**** Get all links from a web page as a list
#+BEGIN_SRC emacs-lisp
  (defun pc/page-links-to-org-list (url)
    "Get all links on page as an org list"
    (interactive "sURL: ")
    (let* ((command (format "curl -s %s | pandoc -r html -w org | grep -ozP \"\\[\\[(.|\\s)*?\\]\\]\"" url))
           links n)
      (with-temp-buffer
        (call-process-shell-command command nil t)
        (goto-char (point-min))
        (setq n (count-lines (point-min) (point-max)))
        (dotimes (x n)
          (insert "\n- ")
          (search-forward " ")
          (backward-delete-char 1))
        (setq links (buffer-string)))
      (insert links)))
#+END_SRC
*** ox-hugo
**** Export on save
#+BEGIN_SRC emacs-lisp
  (require 'ox-hugo-auto-export)
  (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save)
#+END_SRC
**** Capture template for new post
#+BEGIN_SRC emacs-lisp
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post."
    (let* ((date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
           (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title " :noexport:")
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                   ":EXPORT_DESCRIPTION:"
                   ":EXPORT_HUGO_CUSTOM_FRONT_MATTER:"
                   ":END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))

  (with-eval-after-load 'org
    (require 'org-capture nil t)
    (add-to-list 'org-capture-templates
                 '("b"
                   "Blog post for punchagan.muse-amuse.in"
                   entry
                   (file "blog-posts.org")
                   (function org-hugo-new-subtree-post-capture-template)
                   :prepend t)))
#+END_SRC
**** Helper function to copy original org sources
#+BEGIN_SRC emacs-lisp
  (defun pc/org-hugo-copy-sources ()
    "Copy the org sources to hugo content-org dir."
    (interactive)
    (let* ((info (org-export-get-environment 'hugo))
           (base-dir (plist-get info :hugo-base-dir))
           (content-dir (expand-file-name "content-org" base-dir))
           (path (expand-file-name "all-posts.org" content-dir)))

      (make-directory content-dir t)
      (copy-file (buffer-file-name) path t)
      (with-current-buffer (find-file path)
        (org-content 100)
        ;; Delete all noexport tagged headings
        (save-mark-and-excursion
          (org-map-entries (lambda ()
                             (org-mark-subtree)
                             (delete-region (point) (mark))
                             (setq org-map-continue-from (point-min)))
                           ;; Match all posts which are DRAFT or TODO
                           "noexport"
                           nil))
        (goto-char (point-min))
        (save-buffer))))
#+END_SRC
*** org-super-agenda
**** Enable super agenda
#+BEGIN_SRC emacs-lisp
  (org-super-agenda-mode +1)
#+END_SRC
**** Set super agenda groups
Taken from an example here: https://github.com/alphapapa/org-super-agenda/blob/master/examples.org
#+BEGIN_SRC emacs-lisp
  (setq org-super-agenda-groups
        '((:log t)  ; Automatically named "Log"
          (:name "Schedule"
                 :time-grid t)
          (:name "Today"
                 :scheduled today)
          ;; (:habit t)
          (:name "Due today"
                 :deadline today)
          (:name "Overdue"
                 :deadline past)
          (:name "Due soon"
                 :deadline future)
          (:name "Unimportant"
                 :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH")
                 :order 100)
          (:name "Waiting..."
                 :todo "WAITING"
                 :order 98)
          (:name "Scheduled earlier"
                 :scheduled past)))
#+END_SRC
*** org-books
#+BEGIN_SRC emacs-lisp
  (require 'org-books)
  (setq org-books-file (expand-file-name "Books.org" org-directory))
#+END_SRC
**** Define a protocol for adding books by url
#+BEGIN_SRC emacs-lisp
  (defun pc/add-books (x)
    (let* ((url (org-protocol-sanitize-uri
                (plist-get (org-protocol-parse-parameters x nil '(:url))
                           :url)))
          (stripped-url (save-match-data
                          (if (string-match "'$" url)
                              (replace-match "" t t url)
                            url))))
      (org-books-add-url stripped-url)))

  (add-to-list 'org-protocol-protocol-alist
               '("org-books-add-url" :protocol "add-book" :function pc/add-books))
#+END_SRC
*** org-zulip
**** convert zulip markdown to org-mode
#+BEGIN_SRC emacs-lisp
  (defun pc/zulip-to-org (begin end)
    (interactive "r")
    (when (use-region-p)
      (shell-command-on-region begin end "pandoc -r markdown -w org" t t)))
#+END_SRC
**** Zulip helpers
#+BEGIN_SRC emacs-lisp
  (require 'zulip-helpers)

  ;; FIXME: Need to make this more legit!
  ;; Changed 4 space indents to 2 for Zulip writes...
  (defun org-md-item (item contents info)
    "Transcode ITEM element into Markdown format.
  CONTENTS is the item contents.  INFO is a plist used as
  a communication channel."
    (let* ((type (org-element-property :type (org-export-get-parent item)))
           (struct (org-element-property :structure item))
           (bullet (if (not (eq type 'ordered)) "-"
                     (concat (number-to-string
                              (car (last (org-list-get-item-number
                                          (org-element-property :begin item)
                                          struct
                                          (org-list-prevs-alist struct)
                                          (org-list-parents-alist struct)))))
                             "."))))
      (concat bullet
              (make-string (- 2 (length bullet)) ? )
              (pcase (org-element-property :checkbox item)
                (`on "[X] ")
                (`trans "[-] ")
                (`off "[ ] "))
              (let ((tag (org-element-property :tag item)))
                (and tag (format "**%s:** "(org-export-data tag info))))
              (and contents
                   (org-trim (replace-regexp-in-string "^" "  " contents))))))
#+END_SRC
**** Stream of consciousness
#+BEGIN_SRC emacs-lisp
  (require 'f)
  (defun pc/post-to-stream-of-consciousness (realm)
    (interactive
     (list
      (completing-read "Realm: "
                       (mapcar (lambda (path) (f-no-ext (f-filename path)))
                               (f-files zulip-rc-directory)))))
    (let ((inhibit-modification-hooks t))
      (org-set-property "ZULIP_REALM" realm)
      (org-set-property "ZULIP_STREAM" "consciousness")
      (org-set-property "ZULIP_TOPIC" "Punch"))

    (zulip-org-dwim-subtree))
#+END_SRC
**** Cheppandamma
#+BEGIN_SRC emacs-lisp
  (defun pc/cheppandamma ()
    (interactive)
    (org-set-property "ZULIP_REALM" "park.zulipchat.com")
    (org-set-property "ZULIP_STREAM" "Cheppandamma")
    (org-set-property "ZULIP_TOPIC" "hello")
    (zulip-org-dwim-subtree))
#+END_SRC
*** org-to-gist
#+begin_src emacs-lisp
  (require 'ox-hugo)
  (defun pc/org-subtree-to-gist ()
    (interactive)
    (let* ((org-export-with-toc nil)
           (org-export-with-sub-superscripts '{})
           (switch-to-buffer-preserve-window-point t)
           (gist (org-entry-get (point) "GIST_ID"))
           (title (org-get-heading t t t t))
           (filename (format "%s.md" (org-hugo-slug title)))
           gist-obj
           export-buffer
           content-buffer)
      (setq content-buffer (current-buffer))
      (org-gfm-export-as-markdown nil t)
      (setq export-buffer (current-buffer))
      (if (null gist)
          (flet ((gist-ask-for-description-maybe () ((lambda () title))))
            (rename-buffer filename)
            (markdown-mode)
            (gist-region (point-min) (point-max) t)
            (kill-buffer)
            (setq gist (car (last (split-string (current-kill 0 t) "/"))))
            (switch-to-buffer content-buffer)
            (org-set-property "GIST_ID" gist))
        (progn
          (gist-fetch gist)
          (replace-buffer-contents export-buffer)
          (gist-mode-edit-buffer filename)
          (kill-buffer)
          (with-current-buffer export-buffer
            (kill-buffer))
          (setq gist-obj (gist-list-db-get-gist gist))
          (kill-new (oref gist-obj :html-url) )
          ;; Edit description, if required
          (unless (string= title (oref gist-obj :description))
            (flet ((tabulated-list-get-id () ((lambda () gist)))
                   (read-from-minibuffer (x y) ((lambda () title)))
                   (gist-list-reload () ()))
              (gist-edit-current-description)))))))

#+end_src
* Lang
** js
*** Use prettier in js buffers
#+BEGIN_SRC emacs-lisp
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook 'prettier-js-mode)
  (add-hook 'react-mode-hook 'prettier-js-mode)
#+END_SRC
*** Set prettier-js command
#+BEGIN_SRC emacs-lisp
  (setq prettier-js-show-errors 'echo
        prettier-js-command "prettier")
#+END_SRC
** Python
*** Use white in Python buffers
#+BEGIN_SRC emacs-lisp
  (require 'f)
  (setq pc/python-run-black-on-save t)
  (setq pc/black-directories (list "/home/punchagan/software/thatte-idli"
                                   "/home/punchagan/software/upai"
                                   "/home/punchagan/software/my-repos"))

  (defun pc/python-run-black-interactive ()
    (interactive)
    (call-process "black" nil '("*black-process*" t) nil "-l" "79" (buffer-file-name))
    (with-current-buffer "*black-process*"
      (message (s-trim (s-replace-all '(("%". "%%")) (buffer-string))))
      (kill-buffer)))

  (defun pc/python-run-black ()
    "Hook to run 'black' on python buffers."
    (when (and pc/python-run-black-on-save
               (derived-mode-p 'python-mode)
               (cl-some (lambda (x) (f-descendant-of? (buffer-file-name) x)) pc/black-directories))
      (pc/python-run-black-interactive)))

  (add-hook 'after-save-hook #'pc/python-run-black)

#+END_SRC
* Email
** Setup mu4e contexts
#+BEGIN_SRC emacs-lisp
  (defmacro make-match-func-from-email (email)
    `(lambda (msg)
       (when msg
         (mu4e-message-contact-field-matches
          msg
          :to ,email))))


  (setq mu4e-contexts `(
                        ,(make-mu4e-context
                          :name "muse-amuse"
                          :enter-func (lambda () (mu4e-message "Entering muse-amuse context"))
                          :leave-func (lambda () (mu4e-message "Leaving muse-amuse context"))
                          ;; we match based on the contact-fields of the message
                          :match-func (make-match-func-from-email "punchagan@muse-amuse.in")
                          :vars '((user-mail-address . "punchagan@muse-amuse.in")
                                  (user-full-name . "Puneeth Chaganti")
                                  (message-send-mail-function . message-send-mail-with-sendmail)
                                  (mu4e-reply-to-address . "punchagan@muse-amuse.in")
                                  (mu4e-sent-folder . "/muse-amuse/Sent")
                                  (mu4e-drafts-folder . "/muse-amuse/Drafts")
                                  (mu4e-refile-folder . "/muse-amuse/Archives")
                                  (mu4e-trash-folder . "/muse-amuse/Trash")))
                        ,(make-mu4e-context
                          :name "Gmail"
                          :enter-func (lambda () (mu4e-message "Entering gmail context"))
                          :leave-func (lambda () (mu4e-message "Leaving gmail context"))
                          ;; we match based on the contact-fields of the message
                          :match-func (make-match-func-from-email "punchagan@gmail.com")
                          :vars '((user-mail-address . "punchagan@gmail.com")
                                  (user-full-name . "Puneeth Chaganti")
                                  (message-send-mail-function . message-send-mail-with-sendmail)
                                  (mu4e-reply-to-address . "punchagan@gmail.com")
                                  (mu4e-sent-folder . "/gmail/[Gmail].Sent Mail")
                                  (mu4e-drafts-folder . "/gmail/[Gmail].Drafts")
                                  (mu4e-trash-folder . "/gmail/[Gmail].Trash")
                                  (mu4e-refile-folder . "/gmail/[Gmail].Archive")
                                  (smtpmail-smtp-user . "punchagan@gmail.com")
                                  (smtpmail-mail-address . "punchagan@gmail.com")
                                  (smtpmail-default-smtp-server . "smtp.gmail.com")
                                  (smtpmail-smtp-server . "smtp.gmail.com")
                                  (smtpmail-smtp-service . 587)))))
#+END_SRC
** Some context tricks
Fill user ~mu4e-user-mail-address-list~ from contexts
#+BEGIN_SRC emacs-lisp
  (setq mu4e-user-mail-address-list
        (delq nil
              (mapcar (lambda (context)
                        (when (mu4e-context-vars context)
                          (cdr (assq 'user-mail-address (mu4e-context-vars context)))))
                      mu4e-contexts)))

#+END_SRC
** Setup imapfilter hook
 #+BEGIN_SRC emacs-lisp
  (defun pc/imapfilter ()
    (message "Running imapfilter...")
    (with-current-buffer (get-buffer-create " *imapfilter*")
      (goto-char (point-max))
      (insert "---\n")
      (call-process "imapfilter" nil (current-buffer) nil "-v"))
    (message "Running imapfilter...done"))

  (add-hook 'mu4e-update-pre-hook 'pc/imapfilter)
#+END_SRC
** Setup bookmarks
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "All Inboxes"
                :query "maildir:/muse-amuse/INBOX OR maildir:/gmail/INBOX"
                :key ?i))

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "All Inboxes (Unread)"
                :query "(maildir:/muse-amuse/INBOX OR maildir:/gmail/INBOX) AND flag:unread"
                :key ?I))

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "GMail Inbox"
                :query "maildir:/gmail/INBOX"
                :key ?g))

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "GMail Inbox (Unread)"
                :query "maildir:/gmail/INBOX AND flag:unread"
                :key ?G))

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "muse-amuse Inbox"
                :query "maildir:/muse-amuse/INBOX"
                :key ?m))

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "muse-amuse Inbox (Unread)"
                :query "maildir:/muse-amuse/INBOX AND flag:unread"
                :key ?M))
#+END_SRC
* Fun
** Play music using ~mpsyt~
#+BEGIN_SRC emacs-lisp
  ;; (require 'url)
  (defun pc/short-url-at-point ()
    "Gets the short url at point.

        This function is required only because
        `thing-at-point-url-at-point' ignores urls (without a scheme)
        that don't start with www."
    (let ((bounds (thing-at-point-bounds-of-url-at-point t)))
      (when (and bounds (< (car bounds) (cdr bounds)))
        (buffer-substring-no-properties (car bounds) (cdr bounds)))))

  (defun pc/mpsyt-url (url)
    (let ((buffer (current-buffer))
          (mpsyt-proc-name "*mpsyt*"))

      ;; Start a new term with *mpsyt* if there isn't one
      (unless (get-process mpsyt-proc-name)
        (when (get-buffer mpsyt-proc-name)
          (kill-buffer (get-buffer mpsyt-proc-name)))
        (ansi-term "mpsyt" "mpsyt")
        (pc/mpsyt-set-keybindings))

      ;; Play given url in mpsyt
      (let ((mpsyt-proc (get-process mpsyt-proc-name)))
        ;; If something is already playing, stop it and play this...
        (term-send-string mpsyt-proc "\n\n\n")
        ;; We wait for a bit, since looking for the prompt seems to fail, sometimes?
        (sleep-for 1)
        (term-send-string mpsyt-proc "\n")

        ;; Actually send the command to playurl
        (term-simple-send (get-process mpsyt-proc-name)
                          (format "playurl %s" url)))

      (switch-to-buffer buffer)))

  (defun pc/mpsyt-url-at-point ()
    "Play the URL at point using mpsyt."
    (interactive)
    (let ((url (or (url-get-url-at-point) (pc/short-url-at-point))))
      (if (not url)
          (message "No URL found")
        (message (format "Playing %s with mpsyt" url))
        (pc/mpsyt-url url))))

  (defun pc/mpsyt-set-keybindings ()
    "Change key codes sent for gray keys."
    (use-local-map (copy-keymap term-raw-map))
    (local-set-key (kbd "<up>") (lambda () (interactive) (term-send-raw-string "\e[A")))
    (local-set-key (kbd "<down>") (lambda () (interactive) (term-send-raw-string "\e[B")))
    (local-set-key (kbd "<right>") (lambda () (interactive) (term-send-raw-string "\e[C")))
    (local-set-key (kbd "<left>") (lambda () (interactive) (term-send-raw-string "\e[D"))))
#+END_SRC
**** Bind it to <f8>
#+BEGIN_SRC emacs-lisp
  (bind-key "<f8>" 'pc/mpsyt-url-at-point)
#+END_SRC
** Screenshots to Emacs
#+BEGIN_SRC emacs-lisp
  (require 'f)
  (require 'ox-hugo)  ; We use the slug function

  (defun pc/create-screenshot-file ()
    (unless (eq major-mode 'org-mode)
      (error "Not implemented: works only in org-mode"))
    (let* ((slug (org-hugo-slug (org-no-properties (org-get-heading))))
           (random-hash (substring (uuidgen-4) 0 8))
           (filename (format "%s-%s.png" slug random-hash))
           (path (f-join (f-parent (buffer-file-name)) "images" filename))
           (command (format "~/bin/screenshot2file %s" path)))
      (f-mkdir (f-parent path))
      (call-process-shell-command command nil '(0 t))
      path))

  (defun pc/insert-screenshot ()
    (interactive)
    (let ((path (pc/create-screenshot-file)))
      (insert (format "[[file://%s]]" path))
      (org-display-inline-images)))
#+END_SRC
* Scimax
#+BEGIN_SRC emacs-lisp
  (setq scimax-dir "~/software/random/scimax")
  (add-to-list 'load-path scimax-dir)
  (add-to-list 'load-path (expand-file-name "ob-ipython" scimax-dir))
  (require 'scimax-org-babel-ipython)
#+END_SRC
* Web Services
** Elfeed
*** Capture template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("L" "Elfeed url" entry (file+headline "elfeed.org" "Blogs")
                 "* [[%:link][%:description]]  %^g\n\n"))
#+END_SRC

*** Prettier elfeed
**** Fonts
#+BEGIN_SRC emacs-lisp
  (defface pc/elfeed-search-self-posts-face
    '((((class color) (background light)) (:foreground "#070"))
      (((class color) (background dark))  (:foreground "#0ff")))
    "Face used for my own posts.")

  (defface pc/elfeed-search-programming-face
    '((((class color) (background light)) (:foreground "#070"))
      (((class color) (background dark))  (:foreground "#f90")))
    "Face used for programming posts.")

  (defface pc/elfeed-search-emacs-face
    '((((class color) (background light)) (:foreground "#070"))
      (((class color) (background dark))  (:foreground "#90f")))
    "Face used for Emacs posts.")

  (defface pc/elfeed-search-data-face
      '((((class color) (background light)) (:foreground "#070"))
        (((class color) (background dark))  (:foreground "#FFEB3B")))
      "Face used for Data posts.")

  (add-to-list 'elfeed-search-face-alist '(self pc/elfeed-search-self-posts-face))
  (add-to-list 'elfeed-search-face-alist '(programming pc/elfeed-search-programming-face))
  (add-to-list 'elfeed-search-face-alist '(emacs pc/elfeed-search-emacs-face))
  (add-to-list 'elfeed-search-face-alist '(data pc/elfeed-search-data-face))
#+END_SRC
**** Fix width
#+BEGIN_SRC emacs-lisp
  (setq shr-width 80)
#+END_SRC
*** Mark job entries as read based on keywords
#+BEGIN_SRC emacs-lisp
  (setq pc/interesting-job-words '("python" "django" "backend" "back end" "back-end"
                                   "javascript" "react" "elm" "frontend" "front end" "front-end"
                                   "fullstack" "full stack" "full-stack" "software engineer"
                                   "clojure" "functional" "haskell"
                                   "visual" "d3" "2d" "3d" "three.js"
                                   "data" "analy" "learning" "predict" "machine" "deep"
                                   "research" "news" "journal"
                                   "git " "emacs" "go " "golang" ))

  (defun pc/mark-uninteresting-jobs-as-read ()
    "Mark uninteresting entries tagged with jobs as read"
    (interactive)
    (let ((regexp (mapconcat 'identity pc/interesting-job-words "\\|")))
      (dolist (feed-url (elfeed-feed-list))
        (dolist (entry (elfeed-feed-entries feed-url))
          (when (and (member 'unread (elfeed-entry-tags entry))
                     (member 'jobs (elfeed-entry-tags entry))
                     (not (s-matches? regexp (elfeed-entry-title entry))))
            (print (elfeed-entry-title entry))
            (elfeed-untag entry 'unread))))
      (elfeed-db-save)))
#+END_SRC
